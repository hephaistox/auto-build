{:deps {io.github.clojure/tools.build {:mvn/version "0.10.7"}}
 :paths ["src"]
 :tasks
 {-uberjar {:doc "Uberjar"
            :override-builtin true
            :requires [[auto-build.tasks.uberjar :as build-uberjar]
                       [auto-build.echo :refer [level1-header]]]
            :task (-> (build-uberjar/uberjar level1-header "." "target")
                      exit)}
  :requires [[auto-build.os.exit-codes] [auto-build.os.exiting :refer [exit]]]
  bp {:doc "Before push"
      :task (binding [exit (fn [exit-code & _] (when-not (zero? exit-code) exit-code))]
              (-> (or (run 'format)
                      (run 'lint)
                      (binding [*command-line-args* (conj *command-line-args* "all")]
                        (run 'clj-test))
                      auto-build.os.exit-codes/ok)
                  System/exit))}
  clean {:doc "Clean temporary files"
         :requires [[auto-build.tasks.clean :as task-clean]
                    [auto-build.echo :refer [level1-header]]]
         :task (-> (task-clean/clean level1-header
                                     "."
                                     [".DS_Store" ".nrepl-port"]
                                     [".cpcache" ".shadow-cljs"]
                                     (current-task))
                   exit)}
  clj-test {:doc "Test with clj"
            :requires [[auto-build.tasks.clj-test :as build-clj-test]
                       [auto-build.echo :refer [level1-header]]]
            :task (-> (build-clj-test/clj-test level1-header
                                               "."
                                               "clj-test-runner:for-clj-repl"
                                               (current-task)
                                               ["test-bb" "test-unit"])
                      exit)}
  deploy {:doc "Deploy"
          :requires [[auto-build.tasks.deploy :as task-deploy]
                     [auto-build.echo :refer [level1-header]]]
          :task (-> (task-deploy/deploy level1-header "." "main" (current-task))
                    exit)}
  deps {:doc "Update deps"
        :task (shell "clj -M:antq")}
  docs {:doc "Docs"
        :requires [[auto-build.tasks.docs :as build-docs] [auto-build.echo :refer [level1-header]]]
        :task (->
                (build-docs/docs level1-header "." (current-task) "gh-pages" ":codox:for-clj-repl")
                exit)}
  format {:doc "Format"
          :requires [[auto-build.tasks.formatting :as task-format]
                     [auto-build.echo :refer [level1-header]]]
          :task (-> (task-format/format level1-header "." (current-task))
                    exit)}
  gha {:doc "For github action tests"
       :task (shell "bb clj-test test-unit test-bb -v")}
  heph-info {:doc "Hephaistox project info"
             :requires [[auto-build.tasks.heph-info :as heph-info]
                        [auto-build.echo :refer [level1-header]]]
             :task (-> (heph-info/heph-info level1-header (current-task) ".")
                       exit)}
  lint {:doc "Lint"
        :requires [[auto-build.tasks.lint :as task-lint] [auto-build.echo :refer [level1-header]]]
        :task (-> (task-lint/lint level1-header ["src" "test" "env/unit/test"] "." (current-task))
                  exit)}
  repl {:doc "Clojure repl based on cider"
        :override-builtin true
        :requires [[auto-build.tasks.repl :as build-repl] [auto-build.echo :refer [level1-header]]]
        :task (-> (build-repl/repl level1-header
                                   "."
                                   (current-task)
                                   [:for-clj-repl :test-unit :test-bb :build]
                                   7001)
                  exit)}}}
